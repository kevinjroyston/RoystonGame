import { RULE_NAME as componentClassSuffixRuleName } from './rules/component-class-suffix';
import { RULE_NAME as componentMaxInlineDeclarationsRuleName } from './rules/component-max-inline-declarations';
import { RULE_NAME as componentSelectorRuleName } from './rules/component-selector';
import { RULE_NAME as contextualLifecycleRuleName } from './rules/contextual-lifecycle';
import { RULE_NAME as directiveClassSuffixRuleName } from './rules/directive-class-suffix';
import { RULE_NAME as directiveSelectorRuleName } from './rules/directive-selector';
import { RULE_NAME as noAttributeDecoratorRuleName } from './rules/no-attribute-decorator';
import { RULE_NAME as noConflictingLifecycleRuleName } from './rules/no-conflicting-lifecycle';
import { RULE_NAME as noForwardRefRuleName } from './rules/no-forward-ref';
import { RULE_NAME as noHostMetadataPropertyRuleName } from './rules/no-host-metadata-property';
import { RULE_NAME as noInputPrefixRuleName } from './rules/no-input-prefix';
import { RULE_NAME as noInputRenameRuleName } from './rules/no-input-rename';
import { RULE_NAME as noInputsMetadataPropertyRuleName } from './rules/no-inputs-metadata-property';
import { RULE_NAME as noLifecycleCallRuleName } from './rules/no-lifecycle-call';
import { RULE_NAME as noOutputNativeRuleName } from './rules/no-output-native';
import { RULE_NAME as noOutputOnPrefixRuleName } from './rules/no-output-on-prefix';
import { RULE_NAME as noOutputRenameRuleName } from './rules/no-output-rename';
import { RULE_NAME as noOutputsMetadataPropertyRuleName } from './rules/no-outputs-metadata-property';
import { RULE_NAME as noPipeImpureRuleName } from './rules/no-pipe-impure';
import { RULE_NAME as noQueriesMetadataPropertyRuleName } from './rules/no-queries-metadata-property';
import { RULE_NAME as preferOnPushComponentChangeDetectionRuleName } from './rules/prefer-on-push-component-change-detection';
import { RULE_NAME as preferOutputReadonlyRuleName } from './rules/prefer-output-readonly';
import { RULE_NAME as relativeUrlPrefixRuleName } from './rules/relative-url-prefix';
import { RULE_NAME as useComponentSelectorRuleName } from './rules/use-component-selector';
import { RULE_NAME as useComponentViewEncapsulationRuleName } from './rules/use-component-view-encapsulation';
import { RULE_NAME as useInjectableProvidedInRuleName } from './rules/use-injectable-provided-in';
import { RULE_NAME as useLifecycleInterfaceRuleName } from './rules/use-lifecycle-interface';
import { RULE_NAME as usePipeDecoratorRuleName } from './rules/use-pipe-decorator';
import { RULE_NAME as usePipeTransformInterfaceRuleName } from './rules/use-pipe-transform-interface';
declare const _default: {
    configs: {
        all: {
            "extends": string;
            "rules": {
                "@angular-eslint/component-class-suffix": string;
                "@angular-eslint/component-max-inline-declarations": string;
                "@angular-eslint/component-selector": string;
                "@angular-eslint/contextual-lifecycle": string;
                "@angular-eslint/directive-class-suffix": string;
                "@angular-eslint/directive-selector": string;
                "@angular-eslint/no-attribute-decorator": string;
                "@angular-eslint/no-conflicting-lifecycle": string;
                "@angular-eslint/no-forward-ref": string;
                "@angular-eslint/no-host-metadata-property": string;
                "@angular-eslint/no-input-prefix": string;
                "@angular-eslint/no-input-rename": string;
                "@angular-eslint/no-inputs-metadata-property": string;
                "@angular-eslint/no-lifecycle-call": string;
                "@angular-eslint/no-output-native": string;
                "@angular-eslint/no-output-on-prefix": string;
                "@angular-eslint/no-output-rename": string;
                "@angular-eslint/no-outputs-metadata-property": string;
                "@angular-eslint/no-pipe-impure": string;
                "@angular-eslint/no-queries-metadata-property": string;
                "@angular-eslint/prefer-on-push-component-change-detection": string;
                "@angular-eslint/prefer-output-readonly": string;
                "@angular-eslint/relative-url-prefix": string;
                "@angular-eslint/use-component-selector": string;
                "@angular-eslint/use-component-view-encapsulation": string;
                "@angular-eslint/use-injectable-provided-in": string;
                "@angular-eslint/use-lifecycle-interface": string;
                "@angular-eslint/use-pipe-decorator": string;
                "@angular-eslint/use-pipe-transform-interface": string;
            };
            "overrides": {
                "files": string[];
                "parser": string;
                "plugins": string[];
                "rules": {
                    "@angular-eslint/template/banana-in-a-box": string;
                    "@angular-eslint/template/cyclomatic-complexity": string;
                    "@angular-eslint/template/no-call-expression": string;
                    "@angular-eslint/template/no-negated-async": string;
                };
            }[];
        };
        base: {
            "parser": string;
            "parserOptions": {
                "ecmaVersion": number;
                "sourceType": string;
                "project": string;
            };
            "plugins": string[];
        };
        recommended: {
            "extends": string;
            "rules": {
                "@angular-eslint/component-class-suffix": string;
                "@angular-eslint/contextual-lifecycle": string;
                "@angular-eslint/directive-class-suffix": string;
                "@angular-eslint/no-conflicting-lifecycle": string;
                "@angular-eslint/no-host-metadata-property": string;
                "@angular-eslint/no-input-rename": string;
                "@angular-eslint/no-inputs-metadata-property": string;
                "@angular-eslint/no-output-native": string;
                "@angular-eslint/no-output-on-prefix": string;
                "@angular-eslint/no-output-rename": string;
                "@angular-eslint/no-outputs-metadata-property": string;
                "@angular-eslint/use-lifecycle-interface": string;
                "@angular-eslint/use-pipe-transform-interface": string;
            };
            "overrides": {
                "files": string[];
                "parser": string;
                "plugins": string[];
                "rules": {
                    "@angular-eslint/template/banana-in-a-box": string;
                    "@angular-eslint/template/no-negated-async": string;
                };
            }[];
        };
    };
    rules: {
        [componentClassSuffixRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"componentClassSuffix", [{
            suffixes: string[];
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [componentMaxInlineDeclarationsRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"componentMaxInlineDeclarations", [{
            template?: number | undefined;
            styles?: number | undefined;
            animations?: number | undefined;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [componentSelectorRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/component-selector.js").MessageIds, [{
            type: string | string[];
            prefix: string | string[];
            style: string;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [contextualLifecycleRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"contextuaLifecycle", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [directiveClassSuffixRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"directiveClassSuffix", [{
            suffixes: string[];
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [directiveSelectorRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/component-selector.js").MessageIds, [{
            type: string | string[];
            prefix: string | string[];
            style: string;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noAttributeDecoratorRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noAttributeDecorator", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noConflictingLifecycleRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/no-conflicting-lifecycle.js").MessageIds, [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noForwardRefRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noForwardRef", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noHostMetadataPropertyRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noHostMetadataProperty", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noInputPrefixRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noInputPrefix", [{
            prefixes: string[];
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noInputRenameRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noInputRename", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noInputsMetadataPropertyRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noInputsMetadataProperty", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noLifecycleCallRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noLifecycleCall", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noOutputNativeRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noOutputNative", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noOutputOnPrefixRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noOutputOnPrefix", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noOutputRenameRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noOutputRename", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noOutputsMetadataPropertyRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noOutputsMetadataProperty", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noPipeImpureRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noPipeImpure", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [noQueriesMetadataPropertyRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noQueriesMetadataProperty", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [preferOnPushComponentChangeDetectionRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"preferOnPushComponentChangeDetection", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [preferOutputReadonlyRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"preferOutputReadonly", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [relativeUrlPrefixRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"relativeUrlPrefix", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [useComponentSelectorRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"useComponentSelector", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [useComponentViewEncapsulationRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"useComponentViewEncapsulation", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [useInjectableProvidedInRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"useInjectableProvidedIn", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [useLifecycleInterfaceRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"useLifecycleInterface", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [usePipeDecoratorRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"usePipeDecorator", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        [usePipeTransformInterfaceRuleName]: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"usePipeTransformInterface", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
    };
};
export default _default;
