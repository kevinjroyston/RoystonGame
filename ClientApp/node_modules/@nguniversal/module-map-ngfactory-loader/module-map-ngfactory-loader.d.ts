
import { Compiler } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { ModuleWithProviders } from '@angular/core';
import { NgModuleFactory } from '@angular/core';
import { NgModuleFactoryLoader } from '@angular/core';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';

/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
import * as ɵngcc0 from '@angular/core';
export declare const MODULE_MAP: InjectionToken<ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a>;

/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
export declare class ModuleMapLoaderModule {
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    static withMap(moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a): ModuleWithProviders<ModuleMapLoaderModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ModuleMapLoaderModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ModuleMapLoaderModule>;
}

/**
 * NgModuleFactoryLoader which does not lazy load
 */
export declare class ModuleMapNgFactoryLoader implements NgModuleFactoryLoader {
    private compiler;
    private moduleMap;
    constructor(compiler: Compiler, moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a);
    load(loadChildrenString: string): Promise<NgModuleFactory<any>>;
    private loadFactory;
    private loadAndCompile;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModuleMapNgFactoryLoader, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ModuleMapNgFactoryLoader>;
}

/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
export declare function provideModuleMap(moduleMap: ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a): StaticProvider;

export declare type ɵnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a = {
    [key: string]: Type<any> | NgModuleFactory<any>;
};

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmQudHMiLCJzb3VyY2VzIjpbIm1vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0dBQStHLDBDQUFtQjs7O0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tcGlsZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ01vZHVsZUZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdNb2R1bGVGYWN0b3J5TG9hZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBUb2tlbiB1c2VkIGJ5IHRoZSBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgdG8gbG9hZCBtb2R1bGVzXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBNT0RVTEVfTUFQOiBJbmplY3Rpb25Ub2tlbjzJtW5ndW5pdmVyc2FsX21vZHVsZXNfbW9kdWxlX21hcF9uZ2ZhY3RvcnlfbG9hZGVyX21vZHVsZV9tYXBfbmdmYWN0b3J5X2xvYWRlcl9hPjtcclxuXHJcbi8qKlxyXG4gKiBNb2R1bGUgZm9yIHVzaW5nIGEgTmdNb2R1bGVGYWN0b3J5TG9hZGVyIHdoaWNoIGRvZXMgbm90IGxhenkgbG9hZFxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTW9kdWxlTWFwTG9hZGVyTW9kdWxlIHtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIE1vZHVsZU1hcExvYWRlck1vZHVsZSBhbG9uZyB3aXRoIGEgTU9EVUxFX01BUFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtb2R1bGVNYXAgTWFwIHRvIHVzZSBhcyBhIHZhbHVlIGZvciBNT0RVTEVfTUFQXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB3aXRoTWFwKG1vZHVsZU1hcDogybVuZ3VuaXZlcnNhbF9tb2R1bGVzX21vZHVsZV9tYXBfbmdmYWN0b3J5X2xvYWRlcl9tb2R1bGVfbWFwX25nZmFjdG9yeV9sb2FkZXJfYSk6IE1vZHVsZVdpdGhQcm92aWRlcnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgaW1wbGVtZW50cyBOZ01vZHVsZUZhY3RvcnlMb2FkZXIge1xyXG4gICAgcHJpdmF0ZSBjb21waWxlcjtcclxuICAgIHByaXZhdGUgbW9kdWxlTWFwO1xyXG4gICAgY29uc3RydWN0b3IoY29tcGlsZXI6IENvbXBpbGVyLCBtb2R1bGVNYXA6IMm1bmd1bml2ZXJzYWxfbW9kdWxlc19tb2R1bGVfbWFwX25nZmFjdG9yeV9sb2FkZXJfbW9kdWxlX21hcF9uZ2ZhY3RvcnlfbG9hZGVyX2EpO1xyXG4gICAgbG9hZChsb2FkQ2hpbGRyZW5TdHJpbmc6IHN0cmluZyk6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PGFueT4+O1xyXG4gICAgcHJpdmF0ZSBsb2FkRmFjdG9yeTtcclxuICAgIHByaXZhdGUgbG9hZEFuZENvbXBpbGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHByb3ZpZGVycyBvYmplY3QgZm9yIHRoZSBNT0RVTEVfTUFQXHJcbiAqXHJcbiAqIEBwYXJhbSBtb2R1bGVNYXAgTWFwIHRvIHVzZSBhcyBhIHZhbHVlIGZvciBNT0RVTEVfTUFQXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBwcm92aWRlTW9kdWxlTWFwKG1vZHVsZU1hcDogybVuZ3VuaXZlcnNhbF9tb2R1bGVzX21vZHVsZV9tYXBfbmdmYWN0b3J5X2xvYWRlcl9tb2R1bGVfbWFwX25nZmFjdG9yeV9sb2FkZXJfYSk6IFN0YXRpY1Byb3ZpZGVyO1xyXG5cclxuZXhwb3J0IGRlY2xhcmUgdHlwZSDJtW5ndW5pdmVyc2FsX21vZHVsZXNfbW9kdWxlX21hcF9uZ2ZhY3RvcnlfbG9hZGVyX21vZHVsZV9tYXBfbmdmYWN0b3J5X2xvYWRlcl9hID0ge1xyXG4gICAgW2tleTogc3RyaW5nXTogVHlwZTxhbnk+IHwgTmdNb2R1bGVGYWN0b3J5PGFueT47XHJcbn07XHJcblxyXG5leHBvcnQgeyB9XHJcbiJdfQ==